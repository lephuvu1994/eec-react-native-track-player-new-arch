
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleJavaSpec.js
 *
 * @nolint
 */

package com.doublesymmetry.trackplayer;

import com.facebook.proguard.annotations.DoNotStrip;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.common.build.ReactBuildConfig;
import com.facebook.react.turbomodule.core.interfaces.TurboModule;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;

public abstract class NativeTPMusicModuleSpec extends ReactContextBaseJavaModule implements TurboModule {
  public static final String NAME = "TPMusicModule";

  public NativeTPMusicModuleSpec(ReactApplicationContext reactContext) {
    super(reactContext);
  }

  @Override
  public @Nonnull String getName() {
    return NAME;
  }

  protected abstract Map<String, Object> getTypedExportedConstants();

  @Override
  @DoNotStrip
  public final @Nullable Map<String, Object> getConstants() {
    Map<String, Object> constants = getTypedExportedConstants();
    if (ReactBuildConfig.DEBUG || ReactBuildConfig.IS_INTERNAL_BUILD) {
      Set<String> obligatoryFlowConstants = new HashSet<>(Arrays.asList(
          "CAPABILITY_BOOKMARK",
          "CAPABILITY_DISLIKE",
          "CAPABILITY_JUMP_BACKWARD",
          "CAPABILITY_JUMP_FORWARD",
          "CAPABILITY_LIKE",
          "CAPABILITY_PAUSE",
          "CAPABILITY_PLAY",
          "CAPABILITY_PLAY_FROM_ID",
          "CAPABILITY_PLAY_FROM_SEARCH",
          "CAPABILITY_SEEK_TO",
          "CAPABILITY_SET_RATING",
          "CAPABILITY_SKIP",
          "CAPABILITY_SKIP_TO_NEXT",
          "CAPABILITY_SKIP_TO_PREVIOUS",
          "CAPABILITY_STOP",
          "PITCH_ALGORITHM_LINEAR",
          "PITCH_ALGORITHM_MUSIC",
          "PITCH_ALGORITHM_VOICE",
          "RATING_3_STARS",
          "RATING_4_STARS",
          "RATING_5_STARS",
          "RATING_HEART",
          "RATING_PERCENTAGE",
          "RATING_THUMBS_UP_DOWN",
          "REPEAT_OFF",
          "REPEAT_QUEUE",
          "REPEAT_TRACK",
          "STATE_BUFFERING",
          "STATE_LOADING",
          "STATE_NONE",
          "STATE_PAUSED",
          "STATE_PLAYING",
          "STATE_READY",
          "STATE_STOPPED"
      ));
      Set<String> optionalFlowConstants = new HashSet<>();
      Set<String> undeclaredConstants = new HashSet<>(constants.keySet());
      undeclaredConstants.removeAll(obligatoryFlowConstants);
      undeclaredConstants.removeAll(optionalFlowConstants);
      if (!undeclaredConstants.isEmpty()) {
        throw new IllegalStateException(String.format("Native Module Flow doesn't declare constants: %s", undeclaredConstants));
      }
      undeclaredConstants = obligatoryFlowConstants;
      undeclaredConstants.removeAll(constants.keySet());
      if (!undeclaredConstants.isEmpty()) {
        throw new IllegalStateException(String.format("Native Module doesn't fill in constants: %s", undeclaredConstants));
      }
    }
    return constants;
  }

  @ReactMethod
  @DoNotStrip
  public abstract void setupPlayer(ReadableMap options, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void updateOptions(ReadableMap options, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void play(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void pause(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void stop(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void reset(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void retry(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void skip(double index, @Nullable Double initialPosition, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void skipToNext(@Nullable Double initialPosition, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void skipToPrevious(@Nullable Double initialPosition, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void seekTo(double seconds, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void seekBy(double seconds, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void setRate(double rate, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void add(ReadableArray tracks, @Nullable Double insertBeforeIndex, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void load(ReadableMap track, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void move(double fromIndex, double toIndex, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void remove(ReadableArray indices, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void setQueue(ReadableArray tracks, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void setPlayWhenReady(boolean playWhenReady, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void getPlayWhenReady(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void updateMetadataForTrack(double trackIndex, ReadableMap metadata, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void updateNowPlayingMetadata(ReadableMap metadata, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void clearNowPlayingMetadata(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void removeUpcomingTracks(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void getTrack(double trackIndex, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void getQueue(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void getActiveTrackIndex(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void getActiveTrack(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void getProgress(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void getPlaybackState(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void getRate(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void getDuration(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void getPosition(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void getBufferedPosition(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void isServiceRunning(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void setRepeatMode(double mode, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void getRepeatMode(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void setVolume(double volume, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void getVolume(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void addListener(String eventType);

  @ReactMethod
  @DoNotStrip
  public abstract void removeListeners(double count);
}
