{"version":3,"file":"patchCodegen.test.js","names":["_globals","require","_fsExtra","_interopRequireDefault","_nodePath","_patchCodegen","_mockFs","e","__esModule","default","mockPackageJson","codegenConfig","outputDir","android","javaPackageName","mockReport","info","console","log","warn","error","success","mockJavaSpec","mockProjectPath","path","resolve","__dirname","mockCodegenSpecsPath","describe","beforeEach","mockfs","JSON","stringify","afterEach","restore","it","patchCodegen","expectedDir","expect","fs","pathExists","toBe","expectedFile","fileContent","readFile","toContain"],"sources":["../../src/__tests__/patchCodegen.test.ts"],"sourcesContent":["import { expect, it, describe, beforeEach, afterEach } from '@jest/globals';\nimport fs from 'fs-extra';\nimport path from 'node:path';\nimport { patchCodegen } from '../utils/patchCodegen';\nimport mockfs from 'mock-fs';\nimport type { Report } from '../types';\n\nconst mockPackageJson = {\n  codegenConfig: {\n    outputDir: {\n      android: 'android/generated',\n    },\n    android: {\n      javaPackageName: 'com.bobtest',\n    },\n  },\n};\n\nconst mockReport: Report = {\n  info: console.log,\n  warn: console.log,\n  error: console.log,\n  success: console.log,\n};\n\nconst mockJavaSpec = `\n/**\n * Some comment\n */\n\npackage com.bobtest;\n\nimport com.example.exampleimport;\n\nclass SomeClass {\n  public void someMethod() {\n    // some code\n  }\n}`;\n\nconst mockProjectPath = path.resolve(__dirname, 'mockProject');\nconst mockCodegenSpecsPath = path.resolve(\n  mockProjectPath,\n  'android/generated/java/com/facebook/fbreact/specs'\n);\n\ndescribe('patchCodegen', () => {\n  beforeEach(() => {\n    mockfs({\n      [mockProjectPath]: {\n        'package.json': JSON.stringify(mockPackageJson),\n      },\n      [mockCodegenSpecsPath]: {\n        'NativeBobtestSpec.java': mockJavaSpec,\n      },\n    });\n  });\n\n  afterEach(() => {\n    mockfs.restore();\n  });\n\n  it('moves the files to correct dir', async () => {\n    await patchCodegen(mockProjectPath, mockPackageJson, mockReport);\n\n    const expectedDir = path.resolve(\n      mockProjectPath,\n      'android/generated/java/com/bobtest'\n    );\n\n    expect(await fs.pathExists(expectedDir)).toBe(true);\n  });\n\n  it('replaces the package name in the files', async () => {\n    await patchCodegen(mockProjectPath, mockPackageJson, mockReport);\n\n    const expectedDir = path.resolve(\n      mockProjectPath,\n      'android/generated/java/com/bobtest'\n    );\n\n    const expectedFile = path.resolve(expectedDir, 'NativeBobtestSpec.java');\n\n    const fileContent = await fs.readFile(expectedFile, 'utf8');\n\n    expect(fileContent).toContain('package com.bobtest;');\n  });\n\n  it('removes the old package dir', async () => {\n    await patchCodegen(mockProjectPath, mockPackageJson, mockReport);\n\n    expect(await fs.pathExists(mockCodegenSpecsPath)).toBe(false);\n  });\n});\n"],"mappings":";;AAAA,IAAAA,QAAA,GAAAC,OAAA;AACA,IAAAC,QAAA,GAAAC,sBAAA,CAAAF,OAAA;AACA,IAAAG,SAAA,GAAAD,sBAAA,CAAAF,OAAA;AACA,IAAAI,aAAA,GAAAJ,OAAA;AACA,IAAAK,OAAA,GAAAH,sBAAA,CAAAF,OAAA;AAA6B,SAAAE,uBAAAI,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AAG7B,MAAMG,eAAe,GAAG;EACtBC,aAAa,EAAE;IACbC,SAAS,EAAE;MACTC,OAAO,EAAE;IACX,CAAC;IACDA,OAAO,EAAE;MACPC,eAAe,EAAE;IACnB;EACF;AACF,CAAC;AAED,MAAMC,UAAkB,GAAG;EACzBC,IAAI,EAAEC,OAAO,CAACC,GAAG;EACjBC,IAAI,EAAEF,OAAO,CAACC,GAAG;EACjBE,KAAK,EAAEH,OAAO,CAACC,GAAG;EAClBG,OAAO,EAAEJ,OAAO,CAACC;AACnB,CAAC;AAED,MAAMI,YAAY,GAAG;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AAEF,MAAMC,eAAe,GAAGC,iBAAI,CAACC,OAAO,CAACC,SAAS,EAAE,aAAa,CAAC;AAC9D,MAAMC,oBAAoB,GAAGH,iBAAI,CAACC,OAAO,CACvCF,eAAe,EACf,mDACF,CAAC;AAED,IAAAK,iBAAQ,EAAC,cAAc,EAAE,MAAM;EAC7B,IAAAC,mBAAU,EAAC,MAAM;IACf,IAAAC,eAAM,EAAC;MACL,CAACP,eAAe,GAAG;QACjB,cAAc,EAAEQ,IAAI,CAACC,SAAS,CAACtB,eAAe;MAChD,CAAC;MACD,CAACiB,oBAAoB,GAAG;QACtB,wBAAwB,EAAEL;MAC5B;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,IAAAW,kBAAS,EAAC,MAAM;IACdH,eAAM,CAACI,OAAO,CAAC,CAAC;EAClB,CAAC,CAAC;EAEF,IAAAC,WAAE,EAAC,gCAAgC,EAAE,YAAY;IAC/C,MAAM,IAAAC,0BAAY,EAACb,eAAe,EAAEb,eAAe,EAAEK,UAAU,CAAC;IAEhE,MAAMsB,WAAW,GAAGb,iBAAI,CAACC,OAAO,CAC9BF,eAAe,EACf,oCACF,CAAC;IAED,IAAAe,eAAM,EAAC,MAAMC,gBAAE,CAACC,UAAU,CAACH,WAAW,CAAC,CAAC,CAACI,IAAI,CAAC,IAAI,CAAC;EACrD,CAAC,CAAC;EAEF,IAAAN,WAAE,EAAC,wCAAwC,EAAE,YAAY;IACvD,MAAM,IAAAC,0BAAY,EAACb,eAAe,EAAEb,eAAe,EAAEK,UAAU,CAAC;IAEhE,MAAMsB,WAAW,GAAGb,iBAAI,CAACC,OAAO,CAC9BF,eAAe,EACf,oCACF,CAAC;IAED,MAAMmB,YAAY,GAAGlB,iBAAI,CAACC,OAAO,CAACY,WAAW,EAAE,wBAAwB,CAAC;IAExE,MAAMM,WAAW,GAAG,MAAMJ,gBAAE,CAACK,QAAQ,CAACF,YAAY,EAAE,MAAM,CAAC;IAE3D,IAAAJ,eAAM,EAACK,WAAW,CAAC,CAACE,SAAS,CAAC,sBAAsB,CAAC;EACvD,CAAC,CAAC;EAEF,IAAAV,WAAE,EAAC,6BAA6B,EAAE,YAAY;IAC5C,MAAM,IAAAC,0BAAY,EAACb,eAAe,EAAEb,eAAe,EAAEK,UAAU,CAAC;IAEhE,IAAAuB,eAAM,EAAC,MAAMC,gBAAE,CAACC,UAAU,CAACb,oBAAoB,CAAC,CAAC,CAACc,IAAI,CAAC,KAAK,CAAC;EAC/D,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}