"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.runRNCCli = runRNCCli;
var _spawn = require("./spawn");
var _nodePath = _interopRequireDefault(require("node:path"));
var _fsExtra = _interopRequireDefault(require("fs-extra"));
var _nodeAssert = _interopRequireDefault(require("node:assert"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const NODE_BINARY = 'node';

/**
 * Runs the React Native Community CLI with the specified arguments
 */
async function runRNCCli(args, options = {
  stdio: 'ignore'
}) {
  const rncCliBinaryName = await getCliBinaryName();
  const RNC_CLI_BINARY_PATH = _nodePath.default.resolve(process.cwd(),
  // We are always expected to run in the library
  'node_modules', '.bin', rncCliBinaryName);
  return await (0, _spawn.spawn)(RNC_CLI_BINARY_PATH, args, options);
}
async function getCliBinaryName() {
  const rncCliPackagePath = await (0, _spawn.spawn)(NODE_BINARY, ['-e', `console.log(require.resolve('@react-native-community/cli/package.json'))`]);
  const rncCliPackage = await _fsExtra.default.readJson(rncCliPackagePath);
  const binProperty = rncCliPackage.bin;
  (0, _nodeAssert.default)(typeof binProperty === 'object', "React Native CLI doesn't specify proper binaries");
  const binaries = Object.keys(binProperty);
  const rncCliBinaryName = binaries[0];
  (0, _nodeAssert.default)(typeof rncCliBinaryName === 'string', "React Native Community CLI doesn't have any binaries to run");
  return rncCliBinaryName;
}
//# sourceMappingURL=runRNCCli.js.map