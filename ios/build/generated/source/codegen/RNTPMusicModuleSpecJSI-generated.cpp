/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleCpp.js
 */

#include "RNTPMusicModuleSpecJSI.h"

namespace facebook::react {

static jsi::Value __hostFunction_NativeTPMusicModuleCxxSpecJSI_getConstants(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTPMusicModuleCxxSpecJSI *>(&turboModule)->getConstants(
    rt
  );
}
static jsi::Value __hostFunction_NativeTPMusicModuleCxxSpecJSI_setupPlayer(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTPMusicModuleCxxSpecJSI *>(&turboModule)->setupPlayer(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asObject(rt)
  );
}
static jsi::Value __hostFunction_NativeTPMusicModuleCxxSpecJSI_updateOptions(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTPMusicModuleCxxSpecJSI *>(&turboModule)->updateOptions(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asObject(rt)
  );
}
static jsi::Value __hostFunction_NativeTPMusicModuleCxxSpecJSI_play(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTPMusicModuleCxxSpecJSI *>(&turboModule)->play(
    rt
  );
}
static jsi::Value __hostFunction_NativeTPMusicModuleCxxSpecJSI_pause(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTPMusicModuleCxxSpecJSI *>(&turboModule)->pause(
    rt
  );
}
static jsi::Value __hostFunction_NativeTPMusicModuleCxxSpecJSI_stop(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTPMusicModuleCxxSpecJSI *>(&turboModule)->stop(
    rt
  );
}
static jsi::Value __hostFunction_NativeTPMusicModuleCxxSpecJSI_reset(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTPMusicModuleCxxSpecJSI *>(&turboModule)->reset(
    rt
  );
}
static jsi::Value __hostFunction_NativeTPMusicModuleCxxSpecJSI_retry(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTPMusicModuleCxxSpecJSI *>(&turboModule)->retry(
    rt
  );
}
static jsi::Value __hostFunction_NativeTPMusicModuleCxxSpecJSI_skip(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTPMusicModuleCxxSpecJSI *>(&turboModule)->skip(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber(),
    count <= 1 || args[1].isUndefined() ? std::nullopt : std::make_optional(args[1].asNumber())
  );
}
static jsi::Value __hostFunction_NativeTPMusicModuleCxxSpecJSI_skipToNext(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTPMusicModuleCxxSpecJSI *>(&turboModule)->skipToNext(
    rt,
    count <= 0 || args[0].isUndefined() ? std::nullopt : std::make_optional(args[0].asNumber())
  );
}
static jsi::Value __hostFunction_NativeTPMusicModuleCxxSpecJSI_skipToPrevious(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTPMusicModuleCxxSpecJSI *>(&turboModule)->skipToPrevious(
    rt,
    count <= 0 || args[0].isUndefined() ? std::nullopt : std::make_optional(args[0].asNumber())
  );
}
static jsi::Value __hostFunction_NativeTPMusicModuleCxxSpecJSI_seekTo(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTPMusicModuleCxxSpecJSI *>(&turboModule)->seekTo(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber()
  );
}
static jsi::Value __hostFunction_NativeTPMusicModuleCxxSpecJSI_seekBy(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTPMusicModuleCxxSpecJSI *>(&turboModule)->seekBy(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber()
  );
}
static jsi::Value __hostFunction_NativeTPMusicModuleCxxSpecJSI_setRate(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTPMusicModuleCxxSpecJSI *>(&turboModule)->setRate(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber()
  );
}
static jsi::Value __hostFunction_NativeTPMusicModuleCxxSpecJSI_add(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTPMusicModuleCxxSpecJSI *>(&turboModule)->add(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asObject(rt).asArray(rt),
    count <= 1 || args[1].isUndefined() ? std::nullopt : std::make_optional(args[1].asNumber())
  );
}
static jsi::Value __hostFunction_NativeTPMusicModuleCxxSpecJSI_load(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTPMusicModuleCxxSpecJSI *>(&turboModule)->load(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asObject(rt)
  );
}
static jsi::Value __hostFunction_NativeTPMusicModuleCxxSpecJSI_move(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTPMusicModuleCxxSpecJSI *>(&turboModule)->move(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber(),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asNumber()
  );
}
static jsi::Value __hostFunction_NativeTPMusicModuleCxxSpecJSI_remove(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTPMusicModuleCxxSpecJSI *>(&turboModule)->remove(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asObject(rt).asArray(rt)
  );
}
static jsi::Value __hostFunction_NativeTPMusicModuleCxxSpecJSI_setQueue(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTPMusicModuleCxxSpecJSI *>(&turboModule)->setQueue(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asObject(rt).asArray(rt)
  );
}
static jsi::Value __hostFunction_NativeTPMusicModuleCxxSpecJSI_setPlayWhenReady(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTPMusicModuleCxxSpecJSI *>(&turboModule)->setPlayWhenReady(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asBool()
  );
}
static jsi::Value __hostFunction_NativeTPMusicModuleCxxSpecJSI_getPlayWhenReady(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTPMusicModuleCxxSpecJSI *>(&turboModule)->getPlayWhenReady(
    rt
  );
}
static jsi::Value __hostFunction_NativeTPMusicModuleCxxSpecJSI_updateMetadataForTrack(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTPMusicModuleCxxSpecJSI *>(&turboModule)->updateMetadataForTrack(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber(),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt)
  );
}
static jsi::Value __hostFunction_NativeTPMusicModuleCxxSpecJSI_updateNowPlayingMetadata(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTPMusicModuleCxxSpecJSI *>(&turboModule)->updateNowPlayingMetadata(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asObject(rt)
  );
}
static jsi::Value __hostFunction_NativeTPMusicModuleCxxSpecJSI_clearNowPlayingMetadata(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTPMusicModuleCxxSpecJSI *>(&turboModule)->clearNowPlayingMetadata(
    rt
  );
}
static jsi::Value __hostFunction_NativeTPMusicModuleCxxSpecJSI_removeUpcomingTracks(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTPMusicModuleCxxSpecJSI *>(&turboModule)->removeUpcomingTracks(
    rt
  );
}
static jsi::Value __hostFunction_NativeTPMusicModuleCxxSpecJSI_getTrack(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTPMusicModuleCxxSpecJSI *>(&turboModule)->getTrack(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber()
  );
}
static jsi::Value __hostFunction_NativeTPMusicModuleCxxSpecJSI_getQueue(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTPMusicModuleCxxSpecJSI *>(&turboModule)->getQueue(
    rt
  );
}
static jsi::Value __hostFunction_NativeTPMusicModuleCxxSpecJSI_getActiveTrackIndex(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTPMusicModuleCxxSpecJSI *>(&turboModule)->getActiveTrackIndex(
    rt
  );
}
static jsi::Value __hostFunction_NativeTPMusicModuleCxxSpecJSI_getActiveTrack(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTPMusicModuleCxxSpecJSI *>(&turboModule)->getActiveTrack(
    rt
  );
}
static jsi::Value __hostFunction_NativeTPMusicModuleCxxSpecJSI_getProgress(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTPMusicModuleCxxSpecJSI *>(&turboModule)->getProgress(
    rt
  );
}
static jsi::Value __hostFunction_NativeTPMusicModuleCxxSpecJSI_getPlaybackState(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTPMusicModuleCxxSpecJSI *>(&turboModule)->getPlaybackState(
    rt
  );
}
static jsi::Value __hostFunction_NativeTPMusicModuleCxxSpecJSI_getRate(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTPMusicModuleCxxSpecJSI *>(&turboModule)->getRate(
    rt
  );
}
static jsi::Value __hostFunction_NativeTPMusicModuleCxxSpecJSI_getDuration(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTPMusicModuleCxxSpecJSI *>(&turboModule)->getDuration(
    rt
  );
}
static jsi::Value __hostFunction_NativeTPMusicModuleCxxSpecJSI_getPosition(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTPMusicModuleCxxSpecJSI *>(&turboModule)->getPosition(
    rt
  );
}
static jsi::Value __hostFunction_NativeTPMusicModuleCxxSpecJSI_getBufferedPosition(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTPMusicModuleCxxSpecJSI *>(&turboModule)->getBufferedPosition(
    rt
  );
}
static jsi::Value __hostFunction_NativeTPMusicModuleCxxSpecJSI_isServiceRunning(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTPMusicModuleCxxSpecJSI *>(&turboModule)->isServiceRunning(
    rt
  );
}
static jsi::Value __hostFunction_NativeTPMusicModuleCxxSpecJSI_setRepeatMode(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTPMusicModuleCxxSpecJSI *>(&turboModule)->setRepeatMode(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber()
  );
}
static jsi::Value __hostFunction_NativeTPMusicModuleCxxSpecJSI_getRepeatMode(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTPMusicModuleCxxSpecJSI *>(&turboModule)->getRepeatMode(
    rt
  );
}
static jsi::Value __hostFunction_NativeTPMusicModuleCxxSpecJSI_setVolume(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTPMusicModuleCxxSpecJSI *>(&turboModule)->setVolume(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber()
  );
}
static jsi::Value __hostFunction_NativeTPMusicModuleCxxSpecJSI_getVolume(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeTPMusicModuleCxxSpecJSI *>(&turboModule)->getVolume(
    rt
  );
}
static jsi::Value __hostFunction_NativeTPMusicModuleCxxSpecJSI_addListener(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeTPMusicModuleCxxSpecJSI *>(&turboModule)->addListener(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeTPMusicModuleCxxSpecJSI_removeListeners(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeTPMusicModuleCxxSpecJSI *>(&turboModule)->removeListeners(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber()
  );
  return jsi::Value::undefined();
}

NativeTPMusicModuleCxxSpecJSI::NativeTPMusicModuleCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker)
  : TurboModule("TPMusicModule", jsInvoker) {
  methodMap_["getConstants"] = MethodMetadata {0, __hostFunction_NativeTPMusicModuleCxxSpecJSI_getConstants};
  methodMap_["setupPlayer"] = MethodMetadata {1, __hostFunction_NativeTPMusicModuleCxxSpecJSI_setupPlayer};
  methodMap_["updateOptions"] = MethodMetadata {1, __hostFunction_NativeTPMusicModuleCxxSpecJSI_updateOptions};
  methodMap_["play"] = MethodMetadata {0, __hostFunction_NativeTPMusicModuleCxxSpecJSI_play};
  methodMap_["pause"] = MethodMetadata {0, __hostFunction_NativeTPMusicModuleCxxSpecJSI_pause};
  methodMap_["stop"] = MethodMetadata {0, __hostFunction_NativeTPMusicModuleCxxSpecJSI_stop};
  methodMap_["reset"] = MethodMetadata {0, __hostFunction_NativeTPMusicModuleCxxSpecJSI_reset};
  methodMap_["retry"] = MethodMetadata {0, __hostFunction_NativeTPMusicModuleCxxSpecJSI_retry};
  methodMap_["skip"] = MethodMetadata {2, __hostFunction_NativeTPMusicModuleCxxSpecJSI_skip};
  methodMap_["skipToNext"] = MethodMetadata {1, __hostFunction_NativeTPMusicModuleCxxSpecJSI_skipToNext};
  methodMap_["skipToPrevious"] = MethodMetadata {1, __hostFunction_NativeTPMusicModuleCxxSpecJSI_skipToPrevious};
  methodMap_["seekTo"] = MethodMetadata {1, __hostFunction_NativeTPMusicModuleCxxSpecJSI_seekTo};
  methodMap_["seekBy"] = MethodMetadata {1, __hostFunction_NativeTPMusicModuleCxxSpecJSI_seekBy};
  methodMap_["setRate"] = MethodMetadata {1, __hostFunction_NativeTPMusicModuleCxxSpecJSI_setRate};
  methodMap_["add"] = MethodMetadata {2, __hostFunction_NativeTPMusicModuleCxxSpecJSI_add};
  methodMap_["load"] = MethodMetadata {1, __hostFunction_NativeTPMusicModuleCxxSpecJSI_load};
  methodMap_["move"] = MethodMetadata {2, __hostFunction_NativeTPMusicModuleCxxSpecJSI_move};
  methodMap_["remove"] = MethodMetadata {1, __hostFunction_NativeTPMusicModuleCxxSpecJSI_remove};
  methodMap_["setQueue"] = MethodMetadata {1, __hostFunction_NativeTPMusicModuleCxxSpecJSI_setQueue};
  methodMap_["setPlayWhenReady"] = MethodMetadata {1, __hostFunction_NativeTPMusicModuleCxxSpecJSI_setPlayWhenReady};
  methodMap_["getPlayWhenReady"] = MethodMetadata {0, __hostFunction_NativeTPMusicModuleCxxSpecJSI_getPlayWhenReady};
  methodMap_["updateMetadataForTrack"] = MethodMetadata {2, __hostFunction_NativeTPMusicModuleCxxSpecJSI_updateMetadataForTrack};
  methodMap_["updateNowPlayingMetadata"] = MethodMetadata {1, __hostFunction_NativeTPMusicModuleCxxSpecJSI_updateNowPlayingMetadata};
  methodMap_["clearNowPlayingMetadata"] = MethodMetadata {0, __hostFunction_NativeTPMusicModuleCxxSpecJSI_clearNowPlayingMetadata};
  methodMap_["removeUpcomingTracks"] = MethodMetadata {0, __hostFunction_NativeTPMusicModuleCxxSpecJSI_removeUpcomingTracks};
  methodMap_["getTrack"] = MethodMetadata {1, __hostFunction_NativeTPMusicModuleCxxSpecJSI_getTrack};
  methodMap_["getQueue"] = MethodMetadata {0, __hostFunction_NativeTPMusicModuleCxxSpecJSI_getQueue};
  methodMap_["getActiveTrackIndex"] = MethodMetadata {0, __hostFunction_NativeTPMusicModuleCxxSpecJSI_getActiveTrackIndex};
  methodMap_["getActiveTrack"] = MethodMetadata {0, __hostFunction_NativeTPMusicModuleCxxSpecJSI_getActiveTrack};
  methodMap_["getProgress"] = MethodMetadata {0, __hostFunction_NativeTPMusicModuleCxxSpecJSI_getProgress};
  methodMap_["getPlaybackState"] = MethodMetadata {0, __hostFunction_NativeTPMusicModuleCxxSpecJSI_getPlaybackState};
  methodMap_["getRate"] = MethodMetadata {0, __hostFunction_NativeTPMusicModuleCxxSpecJSI_getRate};
  methodMap_["getDuration"] = MethodMetadata {0, __hostFunction_NativeTPMusicModuleCxxSpecJSI_getDuration};
  methodMap_["getPosition"] = MethodMetadata {0, __hostFunction_NativeTPMusicModuleCxxSpecJSI_getPosition};
  methodMap_["getBufferedPosition"] = MethodMetadata {0, __hostFunction_NativeTPMusicModuleCxxSpecJSI_getBufferedPosition};
  methodMap_["isServiceRunning"] = MethodMetadata {0, __hostFunction_NativeTPMusicModuleCxxSpecJSI_isServiceRunning};
  methodMap_["setRepeatMode"] = MethodMetadata {1, __hostFunction_NativeTPMusicModuleCxxSpecJSI_setRepeatMode};
  methodMap_["getRepeatMode"] = MethodMetadata {0, __hostFunction_NativeTPMusicModuleCxxSpecJSI_getRepeatMode};
  methodMap_["setVolume"] = MethodMetadata {1, __hostFunction_NativeTPMusicModuleCxxSpecJSI_setVolume};
  methodMap_["getVolume"] = MethodMetadata {0, __hostFunction_NativeTPMusicModuleCxxSpecJSI_getVolume};
  methodMap_["addListener"] = MethodMetadata {1, __hostFunction_NativeTPMusicModuleCxxSpecJSI_addListener};
  methodMap_["removeListeners"] = MethodMetadata {1, __hostFunction_NativeTPMusicModuleCxxSpecJSI_removeListeners};
}


} // namespace facebook::react
