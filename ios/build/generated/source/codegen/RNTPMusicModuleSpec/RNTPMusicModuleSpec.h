/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#ifndef __cplusplus
#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
#endif

// Avoid multiple includes of RNTPMusicModuleSpec symbols
#ifndef RNTPMusicModuleSpec_H
#define RNTPMusicModuleSpec_H

#import <Foundation/Foundation.h>
#import <RCTRequired/RCTRequired.h>
#import <RCTTypeSafety/RCTConvertHelpers.h>
#import <RCTTypeSafety/RCTTypedModuleConstants.h>
#import <React/RCTBridgeModule.h>
#import <React/RCTCxxConvert.h>
#import <React/RCTManagedPointer.h>
#import <ReactCommon/RCTTurboModule.h>
#import <optional>
#import <vector>

namespace JS {
  namespace NativeTPMusicModule {
    struct Constants {

      struct Builder {
        struct Input {
          RCTRequired<double> CAPABILITY_PLAY;
          RCTRequired<double> CAPABILITY_PLAY_FROM_ID;
          RCTRequired<double> CAPABILITY_PLAY_FROM_SEARCH;
          RCTRequired<double> CAPABILITY_PAUSE;
          RCTRequired<double> CAPABILITY_STOP;
          RCTRequired<double> CAPABILITY_SEEK_TO;
          RCTRequired<double> CAPABILITY_SKIP;
          RCTRequired<double> CAPABILITY_SKIP_TO_NEXT;
          RCTRequired<double> CAPABILITY_SKIP_TO_PREVIOUS;
          RCTRequired<double> CAPABILITY_SET_RATING;
          RCTRequired<double> CAPABILITY_JUMP_FORWARD;
          RCTRequired<double> CAPABILITY_JUMP_BACKWARD;
          RCTRequired<double> CAPABILITY_LIKE;
          RCTRequired<double> CAPABILITY_DISLIKE;
          RCTRequired<double> CAPABILITY_BOOKMARK;
          RCTRequired<NSString *> STATE_NONE;
          RCTRequired<NSString *> STATE_READY;
          RCTRequired<NSString *> STATE_PLAYING;
          RCTRequired<NSString *> STATE_PAUSED;
          RCTRequired<NSString *> STATE_STOPPED;
          RCTRequired<NSString *> STATE_BUFFERING;
          RCTRequired<NSString *> STATE_LOADING;
          RCTRequired<double> RATING_HEART;
          RCTRequired<double> RATING_THUMBS_UP_DOWN;
          RCTRequired<double> RATING_3_STARS;
          RCTRequired<double> RATING_4_STARS;
          RCTRequired<double> RATING_5_STARS;
          RCTRequired<double> RATING_PERCENTAGE;
          RCTRequired<double> REPEAT_OFF;
          RCTRequired<double> REPEAT_TRACK;
          RCTRequired<double> REPEAT_QUEUE;
          RCTRequired<double> PITCH_ALGORITHM_LINEAR;
          RCTRequired<double> PITCH_ALGORITHM_MUSIC;
          RCTRequired<double> PITCH_ALGORITHM_VOICE;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing Constants */
        Builder(Constants i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static Constants fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      Constants(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}
@protocol NativeTPMusicModuleSpec <RCTBridgeModule, RCTTurboModule>

- (void)setupPlayer:(NSDictionary *)options
            resolve:(RCTPromiseResolveBlock)resolve
             reject:(RCTPromiseRejectBlock)reject;
- (void)updateOptions:(NSDictionary *)options
              resolve:(RCTPromiseResolveBlock)resolve
               reject:(RCTPromiseRejectBlock)reject;
- (void)play:(RCTPromiseResolveBlock)resolve
      reject:(RCTPromiseRejectBlock)reject;
- (void)pause:(RCTPromiseResolveBlock)resolve
       reject:(RCTPromiseRejectBlock)reject;
- (void)stop:(RCTPromiseResolveBlock)resolve
      reject:(RCTPromiseRejectBlock)reject;
- (void)reset:(RCTPromiseResolveBlock)resolve
       reject:(RCTPromiseRejectBlock)reject;
- (void)retry:(RCTPromiseResolveBlock)resolve
       reject:(RCTPromiseRejectBlock)reject;
- (void)skip:(double)index
initialPosition:(NSNumber *)initialPosition
     resolve:(RCTPromiseResolveBlock)resolve
      reject:(RCTPromiseRejectBlock)reject;
- (void)skipToNext:(NSNumber *)initialPosition
           resolve:(RCTPromiseResolveBlock)resolve
            reject:(RCTPromiseRejectBlock)reject;
- (void)skipToPrevious:(NSNumber *)initialPosition
               resolve:(RCTPromiseResolveBlock)resolve
                reject:(RCTPromiseRejectBlock)reject;
- (void)seekTo:(double)seconds
       resolve:(RCTPromiseResolveBlock)resolve
        reject:(RCTPromiseRejectBlock)reject;
- (void)seekBy:(double)seconds
       resolve:(RCTPromiseResolveBlock)resolve
        reject:(RCTPromiseRejectBlock)reject;
- (void)setRate:(double)rate
        resolve:(RCTPromiseResolveBlock)resolve
         reject:(RCTPromiseRejectBlock)reject;
- (void)add:(NSArray *)tracks
insertBeforeIndex:(NSNumber *)insertBeforeIndex
    resolve:(RCTPromiseResolveBlock)resolve
     reject:(RCTPromiseRejectBlock)reject;
- (void)load:(NSDictionary *)track
     resolve:(RCTPromiseResolveBlock)resolve
      reject:(RCTPromiseRejectBlock)reject;
- (void)move:(double)fromIndex
     toIndex:(double)toIndex
     resolve:(RCTPromiseResolveBlock)resolve
      reject:(RCTPromiseRejectBlock)reject;
- (void)remove:(NSArray *)indices
       resolve:(RCTPromiseResolveBlock)resolve
        reject:(RCTPromiseRejectBlock)reject;
- (void)setQueue:(NSArray *)tracks
         resolve:(RCTPromiseResolveBlock)resolve
          reject:(RCTPromiseRejectBlock)reject;
- (void)setPlayWhenReady:(BOOL)playWhenReady
                 resolve:(RCTPromiseResolveBlock)resolve
                  reject:(RCTPromiseRejectBlock)reject;
- (void)getPlayWhenReady:(RCTPromiseResolveBlock)resolve
                  reject:(RCTPromiseRejectBlock)reject;
- (void)updateMetadataForTrack:(double)trackIndex
                      metadata:(NSDictionary *)metadata
                       resolve:(RCTPromiseResolveBlock)resolve
                        reject:(RCTPromiseRejectBlock)reject;
- (void)updateNowPlayingMetadata:(NSDictionary *)metadata
                         resolve:(RCTPromiseResolveBlock)resolve
                          reject:(RCTPromiseRejectBlock)reject;
- (void)clearNowPlayingMetadata:(RCTPromiseResolveBlock)resolve
                         reject:(RCTPromiseRejectBlock)reject;
- (void)removeUpcomingTracks:(RCTPromiseResolveBlock)resolve
                      reject:(RCTPromiseRejectBlock)reject;
- (void)getTrack:(double)trackIndex
         resolve:(RCTPromiseResolveBlock)resolve
          reject:(RCTPromiseRejectBlock)reject;
- (void)getQueue:(RCTPromiseResolveBlock)resolve
          reject:(RCTPromiseRejectBlock)reject;
- (void)getActiveTrackIndex:(RCTPromiseResolveBlock)resolve
                     reject:(RCTPromiseRejectBlock)reject;
- (void)getActiveTrack:(RCTPromiseResolveBlock)resolve
                reject:(RCTPromiseRejectBlock)reject;
- (void)getProgress:(RCTPromiseResolveBlock)resolve
             reject:(RCTPromiseRejectBlock)reject;
- (void)getPlaybackState:(RCTPromiseResolveBlock)resolve
                  reject:(RCTPromiseRejectBlock)reject;
- (void)getRate:(RCTPromiseResolveBlock)resolve
         reject:(RCTPromiseRejectBlock)reject;
- (void)getDuration:(RCTPromiseResolveBlock)resolve
             reject:(RCTPromiseRejectBlock)reject;
- (void)getPosition:(RCTPromiseResolveBlock)resolve
             reject:(RCTPromiseRejectBlock)reject;
- (void)getBufferedPosition:(RCTPromiseResolveBlock)resolve
                     reject:(RCTPromiseRejectBlock)reject;
- (void)isServiceRunning:(RCTPromiseResolveBlock)resolve
                  reject:(RCTPromiseRejectBlock)reject;
- (void)setRepeatMode:(double)mode
              resolve:(RCTPromiseResolveBlock)resolve
               reject:(RCTPromiseRejectBlock)reject;
- (void)getRepeatMode:(RCTPromiseResolveBlock)resolve
               reject:(RCTPromiseRejectBlock)reject;
- (void)setVolume:(double)volume
          resolve:(RCTPromiseResolveBlock)resolve
           reject:(RCTPromiseRejectBlock)reject;
- (void)getVolume:(RCTPromiseResolveBlock)resolve
           reject:(RCTPromiseRejectBlock)reject;
- (void)addListener:(NSString *)eventType;
- (void)removeListeners:(double)count;
- (facebook::react::ModuleConstants<JS::NativeTPMusicModule::Constants::Builder>)constantsToExport;
- (facebook::react::ModuleConstants<JS::NativeTPMusicModule::Constants::Builder>)getConstants;

@end

@interface NativeTPMusicModuleSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeTPMusicModule'
   */
  class JSI_EXPORT NativeTPMusicModuleSpecJSI : public ObjCTurboModule {
  public:
    NativeTPMusicModuleSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react
inline JS::NativeTPMusicModule::Constants::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto CAPABILITY_PLAY = i.CAPABILITY_PLAY.get();
  d[@"CAPABILITY_PLAY"] = @(CAPABILITY_PLAY);
  auto CAPABILITY_PLAY_FROM_ID = i.CAPABILITY_PLAY_FROM_ID.get();
  d[@"CAPABILITY_PLAY_FROM_ID"] = @(CAPABILITY_PLAY_FROM_ID);
  auto CAPABILITY_PLAY_FROM_SEARCH = i.CAPABILITY_PLAY_FROM_SEARCH.get();
  d[@"CAPABILITY_PLAY_FROM_SEARCH"] = @(CAPABILITY_PLAY_FROM_SEARCH);
  auto CAPABILITY_PAUSE = i.CAPABILITY_PAUSE.get();
  d[@"CAPABILITY_PAUSE"] = @(CAPABILITY_PAUSE);
  auto CAPABILITY_STOP = i.CAPABILITY_STOP.get();
  d[@"CAPABILITY_STOP"] = @(CAPABILITY_STOP);
  auto CAPABILITY_SEEK_TO = i.CAPABILITY_SEEK_TO.get();
  d[@"CAPABILITY_SEEK_TO"] = @(CAPABILITY_SEEK_TO);
  auto CAPABILITY_SKIP = i.CAPABILITY_SKIP.get();
  d[@"CAPABILITY_SKIP"] = @(CAPABILITY_SKIP);
  auto CAPABILITY_SKIP_TO_NEXT = i.CAPABILITY_SKIP_TO_NEXT.get();
  d[@"CAPABILITY_SKIP_TO_NEXT"] = @(CAPABILITY_SKIP_TO_NEXT);
  auto CAPABILITY_SKIP_TO_PREVIOUS = i.CAPABILITY_SKIP_TO_PREVIOUS.get();
  d[@"CAPABILITY_SKIP_TO_PREVIOUS"] = @(CAPABILITY_SKIP_TO_PREVIOUS);
  auto CAPABILITY_SET_RATING = i.CAPABILITY_SET_RATING.get();
  d[@"CAPABILITY_SET_RATING"] = @(CAPABILITY_SET_RATING);
  auto CAPABILITY_JUMP_FORWARD = i.CAPABILITY_JUMP_FORWARD.get();
  d[@"CAPABILITY_JUMP_FORWARD"] = @(CAPABILITY_JUMP_FORWARD);
  auto CAPABILITY_JUMP_BACKWARD = i.CAPABILITY_JUMP_BACKWARD.get();
  d[@"CAPABILITY_JUMP_BACKWARD"] = @(CAPABILITY_JUMP_BACKWARD);
  auto CAPABILITY_LIKE = i.CAPABILITY_LIKE.get();
  d[@"CAPABILITY_LIKE"] = @(CAPABILITY_LIKE);
  auto CAPABILITY_DISLIKE = i.CAPABILITY_DISLIKE.get();
  d[@"CAPABILITY_DISLIKE"] = @(CAPABILITY_DISLIKE);
  auto CAPABILITY_BOOKMARK = i.CAPABILITY_BOOKMARK.get();
  d[@"CAPABILITY_BOOKMARK"] = @(CAPABILITY_BOOKMARK);
  auto STATE_NONE = i.STATE_NONE.get();
  d[@"STATE_NONE"] = STATE_NONE;
  auto STATE_READY = i.STATE_READY.get();
  d[@"STATE_READY"] = STATE_READY;
  auto STATE_PLAYING = i.STATE_PLAYING.get();
  d[@"STATE_PLAYING"] = STATE_PLAYING;
  auto STATE_PAUSED = i.STATE_PAUSED.get();
  d[@"STATE_PAUSED"] = STATE_PAUSED;
  auto STATE_STOPPED = i.STATE_STOPPED.get();
  d[@"STATE_STOPPED"] = STATE_STOPPED;
  auto STATE_BUFFERING = i.STATE_BUFFERING.get();
  d[@"STATE_BUFFERING"] = STATE_BUFFERING;
  auto STATE_LOADING = i.STATE_LOADING.get();
  d[@"STATE_LOADING"] = STATE_LOADING;
  auto RATING_HEART = i.RATING_HEART.get();
  d[@"RATING_HEART"] = @(RATING_HEART);
  auto RATING_THUMBS_UP_DOWN = i.RATING_THUMBS_UP_DOWN.get();
  d[@"RATING_THUMBS_UP_DOWN"] = @(RATING_THUMBS_UP_DOWN);
  auto RATING_3_STARS = i.RATING_3_STARS.get();
  d[@"RATING_3_STARS"] = @(RATING_3_STARS);
  auto RATING_4_STARS = i.RATING_4_STARS.get();
  d[@"RATING_4_STARS"] = @(RATING_4_STARS);
  auto RATING_5_STARS = i.RATING_5_STARS.get();
  d[@"RATING_5_STARS"] = @(RATING_5_STARS);
  auto RATING_PERCENTAGE = i.RATING_PERCENTAGE.get();
  d[@"RATING_PERCENTAGE"] = @(RATING_PERCENTAGE);
  auto REPEAT_OFF = i.REPEAT_OFF.get();
  d[@"REPEAT_OFF"] = @(REPEAT_OFF);
  auto REPEAT_TRACK = i.REPEAT_TRACK.get();
  d[@"REPEAT_TRACK"] = @(REPEAT_TRACK);
  auto REPEAT_QUEUE = i.REPEAT_QUEUE.get();
  d[@"REPEAT_QUEUE"] = @(REPEAT_QUEUE);
  auto PITCH_ALGORITHM_LINEAR = i.PITCH_ALGORITHM_LINEAR.get();
  d[@"PITCH_ALGORITHM_LINEAR"] = @(PITCH_ALGORITHM_LINEAR);
  auto PITCH_ALGORITHM_MUSIC = i.PITCH_ALGORITHM_MUSIC.get();
  d[@"PITCH_ALGORITHM_MUSIC"] = @(PITCH_ALGORITHM_MUSIC);
  auto PITCH_ALGORITHM_VOICE = i.PITCH_ALGORITHM_VOICE.get();
  d[@"PITCH_ALGORITHM_VOICE"] = @(PITCH_ALGORITHM_VOICE);
  return d;
}) {}
inline JS::NativeTPMusicModule::Constants::Builder::Builder(Constants i) : _factory(^{
  return i.unsafeRawValue();
}) {}
#endif // RNTPMusicModuleSpec_H
