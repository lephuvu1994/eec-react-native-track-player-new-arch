/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleH.js
 */

#pragma once

#include <ReactCommon/TurboModule.h>
#include <react/bridging/Bridging.h>

namespace facebook::react {


  class JSI_EXPORT NativeTPMusicModuleCxxSpecJSI : public TurboModule {
protected:
  NativeTPMusicModuleCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);

public:
  virtual jsi::Object getConstants(jsi::Runtime &rt) = 0;
  virtual jsi::Value setupPlayer(jsi::Runtime &rt, jsi::Object options) = 0;
  virtual jsi::Value updateOptions(jsi::Runtime &rt, jsi::Object options) = 0;
  virtual jsi::Value play(jsi::Runtime &rt) = 0;
  virtual jsi::Value pause(jsi::Runtime &rt) = 0;
  virtual jsi::Value stop(jsi::Runtime &rt) = 0;
  virtual jsi::Value reset(jsi::Runtime &rt) = 0;
  virtual jsi::Value retry(jsi::Runtime &rt) = 0;
  virtual jsi::Value skip(jsi::Runtime &rt, double index, std::optional<double> initialPosition) = 0;
  virtual jsi::Value skipToNext(jsi::Runtime &rt, std::optional<double> initialPosition) = 0;
  virtual jsi::Value skipToPrevious(jsi::Runtime &rt, std::optional<double> initialPosition) = 0;
  virtual jsi::Value seekTo(jsi::Runtime &rt, double seconds) = 0;
  virtual jsi::Value seekBy(jsi::Runtime &rt, double seconds) = 0;
  virtual jsi::Value setRate(jsi::Runtime &rt, double rate) = 0;
  virtual jsi::Value add(jsi::Runtime &rt, jsi::Array tracks, std::optional<double> insertBeforeIndex) = 0;
  virtual jsi::Value load(jsi::Runtime &rt, jsi::Object track) = 0;
  virtual jsi::Value move(jsi::Runtime &rt, double fromIndex, double toIndex) = 0;
  virtual jsi::Value remove(jsi::Runtime &rt, jsi::Array indices) = 0;
  virtual jsi::Value setQueue(jsi::Runtime &rt, jsi::Array tracks) = 0;
  virtual jsi::Value setPlayWhenReady(jsi::Runtime &rt, bool playWhenReady) = 0;
  virtual jsi::Value getPlayWhenReady(jsi::Runtime &rt) = 0;
  virtual jsi::Value updateMetadataForTrack(jsi::Runtime &rt, double trackIndex, jsi::Object metadata) = 0;
  virtual jsi::Value updateNowPlayingMetadata(jsi::Runtime &rt, jsi::Object metadata) = 0;
  virtual jsi::Value clearNowPlayingMetadata(jsi::Runtime &rt) = 0;
  virtual jsi::Value removeUpcomingTracks(jsi::Runtime &rt) = 0;
  virtual jsi::Value getTrack(jsi::Runtime &rt, double trackIndex) = 0;
  virtual jsi::Value getQueue(jsi::Runtime &rt) = 0;
  virtual jsi::Value getActiveTrackIndex(jsi::Runtime &rt) = 0;
  virtual jsi::Value getActiveTrack(jsi::Runtime &rt) = 0;
  virtual jsi::Value getProgress(jsi::Runtime &rt) = 0;
  virtual jsi::Value getPlaybackState(jsi::Runtime &rt) = 0;
  virtual jsi::Value getRate(jsi::Runtime &rt) = 0;
  virtual jsi::Value getDuration(jsi::Runtime &rt) = 0;
  virtual jsi::Value getPosition(jsi::Runtime &rt) = 0;
  virtual jsi::Value getBufferedPosition(jsi::Runtime &rt) = 0;
  virtual jsi::Value isServiceRunning(jsi::Runtime &rt) = 0;
  virtual jsi::Value setRepeatMode(jsi::Runtime &rt, double mode) = 0;
  virtual jsi::Value getRepeatMode(jsi::Runtime &rt) = 0;
  virtual jsi::Value setVolume(jsi::Runtime &rt, double volume) = 0;
  virtual jsi::Value getVolume(jsi::Runtime &rt) = 0;
  virtual void addListener(jsi::Runtime &rt, jsi::String eventType) = 0;
  virtual void removeListeners(jsi::Runtime &rt, double count) = 0;

};

template <typename T>
class JSI_EXPORT NativeTPMusicModuleCxxSpec : public TurboModule {
public:
  jsi::Value get(jsi::Runtime &rt, const jsi::PropNameID &propName) override {
    return delegate_.get(rt, propName);
  }

  static constexpr std::string_view kModuleName = "TPMusicModule";

protected:
  NativeTPMusicModuleCxxSpec(std::shared_ptr<CallInvoker> jsInvoker)
    : TurboModule(std::string{NativeTPMusicModuleCxxSpec::kModuleName}, jsInvoker),
      delegate_(reinterpret_cast<T*>(this), jsInvoker) {}


private:
  class Delegate : public NativeTPMusicModuleCxxSpecJSI {
  public:
    Delegate(T *instance, std::shared_ptr<CallInvoker> jsInvoker) :
      NativeTPMusicModuleCxxSpecJSI(std::move(jsInvoker)), instance_(instance) {

    }

    jsi::Object getConstants(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::getConstants) == 1,
          "Expected getConstants(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Object>(
          rt, &T::getConstants, jsInvoker_, instance_);
    }
    jsi::Value setupPlayer(jsi::Runtime &rt, jsi::Object options) override {
      static_assert(
          bridging::getParameterCount(&T::setupPlayer) == 2,
          "Expected setupPlayer(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::setupPlayer, jsInvoker_, instance_, std::move(options));
    }
    jsi::Value updateOptions(jsi::Runtime &rt, jsi::Object options) override {
      static_assert(
          bridging::getParameterCount(&T::updateOptions) == 2,
          "Expected updateOptions(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::updateOptions, jsInvoker_, instance_, std::move(options));
    }
    jsi::Value play(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::play) == 1,
          "Expected play(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::play, jsInvoker_, instance_);
    }
    jsi::Value pause(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::pause) == 1,
          "Expected pause(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::pause, jsInvoker_, instance_);
    }
    jsi::Value stop(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::stop) == 1,
          "Expected stop(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::stop, jsInvoker_, instance_);
    }
    jsi::Value reset(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::reset) == 1,
          "Expected reset(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::reset, jsInvoker_, instance_);
    }
    jsi::Value retry(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::retry) == 1,
          "Expected retry(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::retry, jsInvoker_, instance_);
    }
    jsi::Value skip(jsi::Runtime &rt, double index, std::optional<double> initialPosition) override {
      static_assert(
          bridging::getParameterCount(&T::skip) == 3,
          "Expected skip(...) to have 3 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::skip, jsInvoker_, instance_, std::move(index), std::move(initialPosition));
    }
    jsi::Value skipToNext(jsi::Runtime &rt, std::optional<double> initialPosition) override {
      static_assert(
          bridging::getParameterCount(&T::skipToNext) == 2,
          "Expected skipToNext(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::skipToNext, jsInvoker_, instance_, std::move(initialPosition));
    }
    jsi::Value skipToPrevious(jsi::Runtime &rt, std::optional<double> initialPosition) override {
      static_assert(
          bridging::getParameterCount(&T::skipToPrevious) == 2,
          "Expected skipToPrevious(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::skipToPrevious, jsInvoker_, instance_, std::move(initialPosition));
    }
    jsi::Value seekTo(jsi::Runtime &rt, double seconds) override {
      static_assert(
          bridging::getParameterCount(&T::seekTo) == 2,
          "Expected seekTo(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::seekTo, jsInvoker_, instance_, std::move(seconds));
    }
    jsi::Value seekBy(jsi::Runtime &rt, double seconds) override {
      static_assert(
          bridging::getParameterCount(&T::seekBy) == 2,
          "Expected seekBy(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::seekBy, jsInvoker_, instance_, std::move(seconds));
    }
    jsi::Value setRate(jsi::Runtime &rt, double rate) override {
      static_assert(
          bridging::getParameterCount(&T::setRate) == 2,
          "Expected setRate(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::setRate, jsInvoker_, instance_, std::move(rate));
    }
    jsi::Value add(jsi::Runtime &rt, jsi::Array tracks, std::optional<double> insertBeforeIndex) override {
      static_assert(
          bridging::getParameterCount(&T::add) == 3,
          "Expected add(...) to have 3 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::add, jsInvoker_, instance_, std::move(tracks), std::move(insertBeforeIndex));
    }
    jsi::Value load(jsi::Runtime &rt, jsi::Object track) override {
      static_assert(
          bridging::getParameterCount(&T::load) == 2,
          "Expected load(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::load, jsInvoker_, instance_, std::move(track));
    }
    jsi::Value move(jsi::Runtime &rt, double fromIndex, double toIndex) override {
      static_assert(
          bridging::getParameterCount(&T::move) == 3,
          "Expected move(...) to have 3 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::move, jsInvoker_, instance_, std::move(fromIndex), std::move(toIndex));
    }
    jsi::Value remove(jsi::Runtime &rt, jsi::Array indices) override {
      static_assert(
          bridging::getParameterCount(&T::remove) == 2,
          "Expected remove(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::remove, jsInvoker_, instance_, std::move(indices));
    }
    jsi::Value setQueue(jsi::Runtime &rt, jsi::Array tracks) override {
      static_assert(
          bridging::getParameterCount(&T::setQueue) == 2,
          "Expected setQueue(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::setQueue, jsInvoker_, instance_, std::move(tracks));
    }
    jsi::Value setPlayWhenReady(jsi::Runtime &rt, bool playWhenReady) override {
      static_assert(
          bridging::getParameterCount(&T::setPlayWhenReady) == 2,
          "Expected setPlayWhenReady(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::setPlayWhenReady, jsInvoker_, instance_, std::move(playWhenReady));
    }
    jsi::Value getPlayWhenReady(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::getPlayWhenReady) == 1,
          "Expected getPlayWhenReady(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::getPlayWhenReady, jsInvoker_, instance_);
    }
    jsi::Value updateMetadataForTrack(jsi::Runtime &rt, double trackIndex, jsi::Object metadata) override {
      static_assert(
          bridging::getParameterCount(&T::updateMetadataForTrack) == 3,
          "Expected updateMetadataForTrack(...) to have 3 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::updateMetadataForTrack, jsInvoker_, instance_, std::move(trackIndex), std::move(metadata));
    }
    jsi::Value updateNowPlayingMetadata(jsi::Runtime &rt, jsi::Object metadata) override {
      static_assert(
          bridging::getParameterCount(&T::updateNowPlayingMetadata) == 2,
          "Expected updateNowPlayingMetadata(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::updateNowPlayingMetadata, jsInvoker_, instance_, std::move(metadata));
    }
    jsi::Value clearNowPlayingMetadata(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::clearNowPlayingMetadata) == 1,
          "Expected clearNowPlayingMetadata(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::clearNowPlayingMetadata, jsInvoker_, instance_);
    }
    jsi::Value removeUpcomingTracks(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::removeUpcomingTracks) == 1,
          "Expected removeUpcomingTracks(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::removeUpcomingTracks, jsInvoker_, instance_);
    }
    jsi::Value getTrack(jsi::Runtime &rt, double trackIndex) override {
      static_assert(
          bridging::getParameterCount(&T::getTrack) == 2,
          "Expected getTrack(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::getTrack, jsInvoker_, instance_, std::move(trackIndex));
    }
    jsi::Value getQueue(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::getQueue) == 1,
          "Expected getQueue(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::getQueue, jsInvoker_, instance_);
    }
    jsi::Value getActiveTrackIndex(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::getActiveTrackIndex) == 1,
          "Expected getActiveTrackIndex(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::getActiveTrackIndex, jsInvoker_, instance_);
    }
    jsi::Value getActiveTrack(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::getActiveTrack) == 1,
          "Expected getActiveTrack(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::getActiveTrack, jsInvoker_, instance_);
    }
    jsi::Value getProgress(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::getProgress) == 1,
          "Expected getProgress(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::getProgress, jsInvoker_, instance_);
    }
    jsi::Value getPlaybackState(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::getPlaybackState) == 1,
          "Expected getPlaybackState(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::getPlaybackState, jsInvoker_, instance_);
    }
    jsi::Value getRate(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::getRate) == 1,
          "Expected getRate(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::getRate, jsInvoker_, instance_);
    }
    jsi::Value getDuration(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::getDuration) == 1,
          "Expected getDuration(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::getDuration, jsInvoker_, instance_);
    }
    jsi::Value getPosition(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::getPosition) == 1,
          "Expected getPosition(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::getPosition, jsInvoker_, instance_);
    }
    jsi::Value getBufferedPosition(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::getBufferedPosition) == 1,
          "Expected getBufferedPosition(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::getBufferedPosition, jsInvoker_, instance_);
    }
    jsi::Value isServiceRunning(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::isServiceRunning) == 1,
          "Expected isServiceRunning(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::isServiceRunning, jsInvoker_, instance_);
    }
    jsi::Value setRepeatMode(jsi::Runtime &rt, double mode) override {
      static_assert(
          bridging::getParameterCount(&T::setRepeatMode) == 2,
          "Expected setRepeatMode(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::setRepeatMode, jsInvoker_, instance_, std::move(mode));
    }
    jsi::Value getRepeatMode(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::getRepeatMode) == 1,
          "Expected getRepeatMode(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::getRepeatMode, jsInvoker_, instance_);
    }
    jsi::Value setVolume(jsi::Runtime &rt, double volume) override {
      static_assert(
          bridging::getParameterCount(&T::setVolume) == 2,
          "Expected setVolume(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::setVolume, jsInvoker_, instance_, std::move(volume));
    }
    jsi::Value getVolume(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::getVolume) == 1,
          "Expected getVolume(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::getVolume, jsInvoker_, instance_);
    }
    void addListener(jsi::Runtime &rt, jsi::String eventType) override {
      static_assert(
          bridging::getParameterCount(&T::addListener) == 2,
          "Expected addListener(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::addListener, jsInvoker_, instance_, std::move(eventType));
    }
    void removeListeners(jsi::Runtime &rt, double count) override {
      static_assert(
          bridging::getParameterCount(&T::removeListeners) == 2,
          "Expected removeListeners(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::removeListeners, jsInvoker_, instance_, std::move(count));
    }

  private:
    friend class NativeTPMusicModuleCxxSpec;
    T *instance_;
  };

  Delegate delegate_;
};

} // namespace facebook::react
